@page "/"
@page "/master_view"
@using Models.NorthwindRESTAPI
@using NorthwindRESTAPI
@using Newtonsoft.Json.Serialization;
@* @using System.Text.RegularExpressions @*Uncomment for Option3 *@
@inject INorthwindRESTAPIService NorthwindRESTAPIService

@* CodeGen: CSS required for the under-input validation error messages to be colored *@
<style>
    .validation-message {
        color: hsl(var(--ig-error-500));
    }

    /* Optionally handle dialog size so it does not enlarge when validation messages appear */
    .igb-web-dialog {
    }
</style>

<div class="column-layout master-view-container">
    <div class="row-layout group">
        <IgbGrid @ref="grid" Data="@_northwindRESTAPIEmployeeDto" PrimaryKey="EmployeeId" DisplayDensity="DisplayDensity.Cosy" RowSelection="GridSelectionMode.Single" AutoGenerate="false"
                 RowSelectionChanging="GridRowSelectionChanging" class="ig-typography grid" master_view-scope>
            <IgbColumn Field="EmployeeId" DataType="GridColumnDataType.Number" Header="employeeId" Sortable="true" Filterable="false" Selectable="false"></IgbColumn>
            <IgbColumn Field="FirstName" DataType="GridColumnDataType.String" Header="firstName" Sortable="true" Filterable="false" Selectable="false"></IgbColumn>
            <IgbColumn Field="LastName" DataType="GridColumnDataType.String" Header="lastName" Sortable="true" Filterable="false" Selectable="false"></IgbColumn>
            <IgbColumn Field="Title" DataType="GridColumnDataType.String" Header="title" Sortable="true" Filterable="false" Selectable="false"></IgbColumn>
            <IgbColumn Field="HireDate" DataType="GridColumnDataType.Date" Header="hireDate" Sortable="true" Filterable="false" Selectable="false"></IgbColumn>
            <IgbColumn Field="Address.Phone" DataType="GridColumnDataType.String" Header="address phone" Sortable="true" Filterable="false" Selectable="false"></IgbColumn>
            <IgbColumn Field="Address.Country" DataType="GridColumnDataType.String" Header="address country" Sortable="true" Filterable="false" Selectable="false"></IgbColumn>
        </IgbGrid>
    </div>
    <IgbButton class="row-layout" @onclick="Add">Add new Employee</IgbButton>
</div>

@* CodeGen: Should remove default OK button in rendered dialogs --> HideDefaultAction *@
<IgbDialog @ref="dialog" HideDefaultAction Title="@dialogTitle">
    @* NOTE: 1.OnValidSubmit="@HandleSubmit" - handler is fired for ANY button click!!! Fix this via setting <button type="button">
    2. Button type=reset directly resets to Model empty default values/the initial model
    3. NOTE: Two validation patterns
    3.1 If we want component UI interaction red color for invalid, should add component properties aka. <IgbInput... MaxLength="15" MinLength="2" Required Blur="@OnBlur"...
    3.2 If we want inline validation messages, should handle Blur="@OnBlur" adding a message there and an inline <ValidationMessage For="@(() => Model.FirstName)" />
    3.3 Validation for LastName & Title is handled ONLY via Model attributes and visible on "HandleSubmit" Gray color messages by default.
    *@
    <EditForm EditContext="editContext" OnValidSubmit="@HandleSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <IgbInput @bind-Value="Model.FirstName" Label="First Name" MaxLength="15" MinLength="2" Required Blur="@OnBlur" Outlined="true" class="user-input" master_view-scope></IgbInput>
        <ValidationMessage For="() => Model.FirstName" />
        <IgbInput @bind-Value="Model.LastName" Label="Last Name" Outlined="true" class="user-input" master_view-scope></IgbInput>
        @* <ValidationMessage For="@(() => Model.LastName)" /> *@
        <IgbInput @bind-Value="Model.Title" Label="Title" Outlined="true" class="user-input" master_view-scope></IgbInput>
        @* <ValidationMessage For="@(() => Model.Title)" /> *@
        <IgbDatePicker @bind-Value="Model.HireDate" Label="Hire Date" class="date-picker" master_view-scope></IgbDatePicker>
        @* <ValidationMessage For="() => Model.HireDate" /> *@
        <IgbInput DisplayType="InputType.Tel" @bind-Value="Model.Address.Phone" Label="Phone" Outlined="true" class="user-input" master_view-scope></IgbInput>
        @* <ValidationMessage For="() => Model.Address.Phone" />  Uncomment for option3 - does not seem to work*@

        @* IgbSelect should work after bug fixes ISSUE: https://infragistics.visualstudio.com/NetAdvantage/_workitems/edit/30935/ *@
        @*<IgbSelect @bind-Value="Model.Address.Country" Outlined="true" Label="Country" class="user-input" master_view-scope>
        @foreach (var address in _countriesDto)
        {
        string country = address.Country.ToString();
        <IgbSelectItem Value="@country" Selected="@(Model.Address.Country == @country)">@country</IgbSelectItem>
        }
        </IgbSelect> *@

        @* Note: IgbCombo @bind-Value will not work for the current scenario, as the combo works with an array of objects and the model we want to use is not an object in an array but Model.Address.Country*@
        @* <IgbCombo Data="@_countriesDto" SingleSelect="true" @bind-Value="{ Model.Address.Country }" DisplayKey="Country" Outlined="true" class="single-select-combo" master_view-scope></IgbCombo>*@

        @* Note: Example using Value & Change instead of @bind-Value *@
        <IgbCombo Data="@_countriesDto" SingleSelect="true" Value="@ComboNoValueKeyValue()" DisplayKey="Country" Change="ComboNoValueKeyChange" Outlined="true" class="single-select-combo" master_view-scope></IgbCombo>

        <br />
        <button type="submit">Submit</button>
        <button type="button" @onclick="ResetEmployee">Reset</button>
        <button type="button" @onclick="ResetCloseForm">Cancel</button>
        @if (dialogTitle == "Edit Employee")
        {
            <button type="button" @onclick="DeleteCloseForm">Delete</button>
        }
    </EditForm>
</IgbDialog>

@code {
    #region Common for all options

    private EditContext editContext;
    private EmployeeDto? Model = new();
    private EmployeeDto? cachedModel = new();
    private IgbDialog dialog;
    private IgbGrid grid;
    private List<EmployeeDto> _northwindRESTAPIEmployeeDto = new();
    private List<AddressDto> _countriesDto = new();
    string selectedCountry;
    string dialogTitle = "Edit Employee";

    public static T DeepCopyJsonDotNet<T>(T input)
    {
        var serialized = Newtonsoft.Json.JsonConvert.SerializeObject(input);
        return Newtonsoft.Json.JsonConvert.DeserializeObject<T>(serialized);
    }

    protected override async Task OnInitializedAsync()
    {
        _northwindRESTAPIEmployeeDto = await NorthwindRESTAPIService.GetEmployeeDtoList();
        _countriesDto = await NorthwindRESTAPIService.GetCountriesDtoList();
        await base.OnInitializedAsync();
    }

    private async void EditEmployee(EmployeeDto editedEmployee)
    {
        var result = await NorthwindRESTAPIService.PutEmployee(editedEmployee);
        if (result != null)
        {
            UpdateComponents();
        }
        else
        {
            // TODO: handle errors here.
        }
    }

    private void Add()
    {
        dialogTitle = "Add new employee";
        #region WTF: Deselect Console Errors
        // grid.DeselectAllRows(false);
        // grid.DeselectAllRowsAsync(false);
        // StateHasChanged();
        // var selection = grid.SelectedRows.FirstOrDefault();
        // var curSelection = grid.GetCurrentSelectedRowsAsync();
        // grid.DeselectRows(selection);
        // grid.deselectAll(); // Not implemented in Blazor
        #endregion

        Model = new();
        Model.Address = new AddressDto();

        #region [EndPoint] Fix EndPoint 500 exception for null address obj values either here OR in the POST method on POST new Employee
        Model.Address.PostalCode = "12345";
        Model.Address.City = "New York";
        Model.Address.Street = "123 Main St";
        Model.Address.Region = "NY";
        #endregion

        cachedModel = new();
        editContext = new(Model);
        dialog.ShowAsync();
    }

    private async void DeleteEmployee(int employeeId)
    {
        var result = await NorthwindRESTAPIService.DeleteEmployee(employeeId);
        if (result != null)
        {
            UpdateComponents();
        }
        else
        {
            // TODO: handle errors here.
        }
    }

    private async void UpdateComponents()
    {
        // Fetch updated endpoint data or reuse local data on fail //resetting to _northwindRESTAPIEmployeeDto may NOT be NEEDED in the end
        _northwindRESTAPIEmployeeDto = await NorthwindRESTAPIService.GetEmployeeDtoList() ?? _northwindRESTAPIEmployeeDto;
        // Update the grid with the new response records
        StateHasChanged();
        // Close form dialog
        await dialog.HideAsync();
    }

    protected object[] ComboNoValueKeyValue()
    {
        if (Model.Address.Country != null)
        {
            return new object[] { Model.Address };
        }

        return Array.Empty<object>();
    }

    protected void ComboNoValueKeyChange(IgbComboChangeEventArgs e)
    {
        if (e.Detail.NewValue.Length != 0)
        {
            Model.Address.Country = ((AddressDto)e.Detail.NewValue.First()).Country;
        }
    }

    private void ResetCloseForm()
    {
        ResetEmployee();
        dialog.HideAsync();
    }

    private void DeleteCloseForm()
    {
        DeleteEmployee(Model.EmployeeId);
        dialog.HideAsync();
    }

    private async void AddEmployee(EmployeeDto employee)
    {
        var result = await NorthwindRESTAPIService.PostEmployee(employee);
        if (result != null)
        {
            UpdateComponents();
        }
        else
        {
            // TODO: handle errors here.
            await dialog.HideAsync();
        }
    }

    #endregion Common

    #region Option1: Less code. New editContext instance in GridRowSelectionChanging. Validation onblur is lost due to new editContext instance used(no model attributes requred)

    private ValidationMessageStore? messageStore;

    protected override void OnInitialized()
    {
        #region CodeGen: Whole obj int is not really needed. It can be done in the Model. Will generate the nested types with instantiation in the model via CodeGen!
        // Alternative to initializing in the Address Model like this: public AddressDto Address { get; set; } = new();
        // 1) Model.Address ??= new();

        // 2) To initialize the whole object is a bulky but a valid option as well
        // Not really needed to instantiate the whole object. Just the Employee and its nested types as Address
        // Model = new EmployeeDto()
        //     {
        //         EmployeeId = 0,
        //         LastName = "",
        //         FirstName = "",
        //         Title = "",
        //         TitleOfCourtesy = "",
        //         BirthDate = new DateTime(),
        //         HireDate = new DateTime(),
        //         AddressId = "",
        //         Address = new AddressDto
        //         {
        //             Street = "",
        //             City = "",
        //             Region = "",
        //             PostalCode = "",
        //             Country = "",
        //             Phone = ""
        //         },
        //         Notes = "",
        //         AvatarUrl = "",
        //         ReportsTo = 0
        //     };
        #endregion

        // Note: An important point to make is that it is considered NOT a GOOD PRACTICE to change out the EditContext model for another object, once created.
        editContext = new(Model);
        editContext.OnValidationRequested += HandleValidationRequested;
        messageStore = new(editContext);
        base.OnInitialized();
    }

    public void GridRowSelectionChanging(IgbRowSelectionEventArgs e)
    {
        // Model = DeepCopyJsonDotNet((EmployeeDto)e.Detail.NewSelection.FirstOrDefault());
        // PROBLEM: This new instanciation causes OnBlur/under-input text message to not show as it is not transferred to the new context
        // editContext = new(Model);
        // CodeGen: The only solution to the above, is to iterate each of the Model properties and assign these explicitly!
        var selectedEmployee = (EmployeeDto)e.Detail.NewSelection.FirstOrDefault();

        // Update existing Model properties
        Model.EmployeeId = selectedEmployee.EmployeeId;
        Model.FirstName = selectedEmployee.FirstName;
        Model.LastName = selectedEmployee.LastName;
        Model.Title = selectedEmployee.Title;
        Model.TitleOfCourtesy = selectedEmployee.TitleOfCourtesy;
        Model.BirthDate = selectedEmployee.BirthDate;
        Model.HireDate = selectedEmployee.HireDate;
        Model.AddressId = selectedEmployee.AddressId;
        Model.Notes = selectedEmployee.Notes;
        Model.AvatarUrl = selectedEmployee.AvatarUrl;
        Model.ReportsTo = selectedEmployee.ReportsTo;

        Model.Address = new AddressDto();
        Model.Address.PostalCode = selectedEmployee.Address.PostalCode;
        Model.Address.Phone = selectedEmployee.Address.Phone;
        Model.Address.Street = selectedEmployee.Address.Street;
        Model.Address.City = selectedEmployee.Address.City;
        Model.Address.Region = selectedEmployee.Address.Region;
        Model.Address.Country = selectedEmployee.Address.Country;

        editContext = new EditContext(Model);
        messageStore = new ValidationMessageStore(editContext);
        editContext.NotifyValidationStateChanged();

        //2) Save the cur model for the form reset, using serialize/deserialize, as object clone/deep copy in C# requires a bunch of excess code
        // https://learn.microsoft.com/en-us/dotnet/api/system.object.memberwiseclone?view=net-8.0#code-try-1
        cachedModel = DeepCopyJsonDotNet(Model);
        dialogTitle = "Edit Employee";
        dialog.ShowAsync();
    }

    async Task HandleSubmit()
    {
        Console.WriteLine("HandleSubmit");

        if (dialogTitle == "Add new employee")
        {
            AddEmployee(Model);
        }

        if (dialogTitle == "Edit Employee")
        // TODO: DO NOT POST if values are not changed(yet still valid)
        // PROBLEM: editContext.IsModified() is not updated and always comes as false. ISSUE: https://infragistics.visualstudio.com/NetAdvantage/_workitems/edit/31408/
        // if (editContext.IsModified())
        // {
        // Make POST request with updated Employee data to the Northwind API endpoint
        // this.EditEmployee(Model);
        // }
        {
            EditEmployee(Model);
        }

        return;
    }

    // PROBLEM: Dialog animation starts close/open
    private void ResetEmployee()
    {
        Model = DeepCopyJsonDotNet(cachedModel);
        editContext = new(Model); // if missing, validation on submit fails tracking its state. Repro: Delete LastName to invalid/Submit/Reset/Still invalid.
        // editContext.NotifyValidationStateChanged(); // Seems not enough to replace editContext = new(Model); on its own.
    }

    private void HandleValidationRequested(object? sender, ValidationRequestedEventArgs args)
    {
        messageStore?.Clear();

        if (string.IsNullOrWhiteSpace(Model.FirstName) || Model.FirstName.Length < 3)
        {
            messageStore?.Add(() => Model.FirstName, "FirstName must be at least 2 characters long.");
        }
    }

    public void OnBlur()
    {
        messageStore?.Clear();

        if (string.IsNullOrWhiteSpace(Model.FirstName) || Model.FirstName.Length < 2)
        {
            messageStore?.Add(() => Model.FirstName, "Name must be at least 2 characters long.");
        }

        Console.WriteLine($"FirstName = {Model?.FirstName} ; LastName = {Model?.LastName}");
    }
    #endregion

    #region Option2: Utilize NotifyValidationStateChanged & NotifyFieldChanged: Works with both validation messages types yet duplicated(requires firstName model validation attributes being set)
    // private bool formSubmitted = false;

    // protected override void OnInitialized()
    // {
    //     editContext = new EditContext(Model);
    // }

    // private async Task HandleSubmit()
    // {
    //     formSubmitted = true;
    //     if (editContext.Validate())
    //     {
    //         this.PostEmployee(Model);
    //     }
    //     formSubmitted = false;
    // }

    // private void ResetEmployee()
    // {
    //     Model = DeepCopyJsonDotNet(cachedModel);
    //     editContext = new EditContext(Model); // Recreate EditContext with new model, so submit messages work as expected
    //     formSubmitted = false;
    //     editContext.NotifyValidationStateChanged();
    // }

    // private void OnBlur()
    // {
    //     if (!formSubmitted)
    //     {
    //         var fieldIdentifier = FieldIdentifier.Create(() => Model.FirstName);
    //         editContext.NotifyFieldChanged(fieldIdentifier);
    //     }
    // }

    // public void GridRowSelectionChanging(IgbRowSelectionEventArgs e)
    // {
    //     var selectedEmployee = (EmployeeDto)e.Detail.NewSelection.FirstOrDefault();

    //     if (selectedEmployee != null)
    //     {
    //         // Update existing Model properties
    //         Model.EmployeeId = selectedEmployee.EmployeeId;
    //         Model.FirstName = selectedEmployee.FirstName;
    //         Model.LastName = selectedEmployee.LastName;
    //         Model.Title = selectedEmployee.Title;
    //         Model.TitleOfCourtesy = selectedEmployee.TitleOfCourtesy;
    //         Model.BirthDate = selectedEmployee.BirthDate;
    //         Model.HireDate = selectedEmployee.HireDate;
    //         Model.AddressId = selectedEmployee.AddressId;
    //         Model.Notes = selectedEmployee.Notes;
    //         Model.AvatarUrl = selectedEmployee.AvatarUrl;
    //         Model.ReportsTo = selectedEmployee.ReportsTo;

    //         //Model.Address
    //         Model.Address.PostalCode = selectedEmployee.Address.PostalCode;
    //         Model.Address.Phone = selectedEmployee.Address.Phone;
    //         Model.Address.Street = selectedEmployee.Address.Street;
    //         Model.Address.City = selectedEmployee.Address.City;
    //         Model.Address.Region = selectedEmployee.Address.Region;
    //         Model.Address.Country = selectedEmployee.Address.Country;

    //         editContext.NotifyValidationStateChanged();
    //         // Optionally, if you need to reset validation state
    //         editContext.MarkAsUnmodified();
    //         editContext.NotifyValidationStateChanged();
    //     }

    //     cachedModel = DeepCopyJsonDotNet(Model);
    //     dialog.ShowAsync();
    // }

    #endregion

    #region Option3: Utilize ValidationMessageStore & NotifyValidationStateChanged: Works with both validation messages but duplicated(no model attributes requred)
    // private ValidationMessageStore messageStore;

    // protected override void OnInitialized()
    // {
    //     editContext = new EditContext(Model);
    //     messageStore = new ValidationMessageStore(editContext);
    // }

    // private async Task HandleSubmit()
    // {
    //     ClearValidationMessages();
    //     ValidateFirstName();
    //     ValidatePhoneNumber();

    //     if (editContext.Validate())
    //     {
    //         PostEmployee(Model);
    //     }
    // }

    // private void ResetEmployee()
    // {
    //     Model = DeepCopyJsonDotNet(cachedModel);
    //     editContext = new EditContext(Model); // Recreate EditContext with new model
    //     messageStore = new ValidationMessageStore(editContext);
    //     editContext.NotifyValidationStateChanged();
    // }

    // private void OnBlur()
    // {
    //     ClearValidationMessages();
    //     ValidateFirstName();
    //     ValidatePhoneNumber();
    //     editContext.NotifyValidationStateChanged();
    // }

    // private void ValidateFirstName()
    // {
    //     if (string.IsNullOrWhiteSpace(Model.FirstName) || Model.FirstName.Length < 2 || Model.FirstName.Length > 15)
    //     {
    //         messageStore.Add(() => Model.FirstName, "First Name must be between 2 and 15 characters long.");
    //     }
    // }

    // private void ValidatePhoneNumber()
    // {
    //     var phonePattern = @"^\s*(?:\+?(\d{1,3}))?[-. (]*(\d{3})[-. )]*(\d{3})[-. ]*(\d{4})(?: *x(\d+))?\s*$";
    //     if (string.IsNullOrWhiteSpace(Model.Address.Phone) || !Regex.IsMatch(Model.Address.Phone, phonePattern))
    //     {
    //         messageStore.Add(() => Model.Address.Phone, "Enter a valid phone number.");
    //     }
    // }

    // private void ClearValidationMessages()
    // {
    //     messageStore.Clear();
    //     editContext.NotifyValidationStateChanged();
    // }

    // public void GridRowSelectionChanging(IgbRowSelectionEventArgs e)
    // {
    //     var selectedEmployee = (EmployeeDto)e.Detail.NewSelection.FirstOrDefault();

    //     if (selectedEmployee != null)
    //     {
    //         // Update existing Model properties
    //         Model.EmployeeId = selectedEmployee.EmployeeId;
    //         Model.FirstName = selectedEmployee.FirstName;
    //         Model.LastName = selectedEmployee.LastName;
    //         Model.Title = selectedEmployee.Title;
    //         Model.TitleOfCourtesy = selectedEmployee.TitleOfCourtesy;
    //         Model.BirthDate = selectedEmployee.BirthDate;
    //         Model.HireDate = selectedEmployee.HireDate;
    //         Model.AddressId = selectedEmployee.AddressId;
    //         Model.Notes = selectedEmployee.Notes;
    //         Model.AvatarUrl = selectedEmployee.AvatarUrl;
    //         Model.ReportsTo = selectedEmployee.ReportsTo;

    //         Model.Address.PostalCode = selectedEmployee.Address.PostalCode;
    //         Model.Address.Phone = selectedEmployee.Address.Phone;
    //         Model.Address.Street = selectedEmployee.Address.Street;
    //         Model.Address.City = selectedEmployee.Address.City;
    //         Model.Address.Region = selectedEmployee.Address.Region;
    //         Model.Address.Country = selectedEmployee.Address.Country;

    //         editContext = new EditContext(Model);
    //         messageStore = new ValidationMessageStore(editContext);
    //         editContext.NotifyValidationStateChanged();
    //     }

    //     cachedModel = DeepCopyJsonDotNet(Model);
    //     dialog.ShowAsync();
    // }

    #endregion



}
