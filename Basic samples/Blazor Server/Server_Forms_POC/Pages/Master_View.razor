@page "/"
@page "/master_view"
@using NorthwindREST
@using Models.NorthwindREST
@inject INorthwindRESTService NorthwindRESTService
@inject NavigationManager Navigation

<div class="row-layout master-view-container">
    <IgbButton @onclick='() => Navigation.NavigateTo("native_inputs")'>
        Go Native
    </IgbButton>
    <EditForm Enhance="true" EditContext="customerEditContext" OnValidSubmit="SubmitCustomerModel" FormName="update" class="form" master_view-scope>
        <p>Edit form pointing to existing variable with @Customer?.CustomerId</p>
        <p>Cloned variable with id @CustomerModel.CustomerId</p>
        <p>Update edit context with id @((customerEditContext.Model as CustomerDto).CustomerId)</p>
        <IgbInput DisplayType="InputType.Text" Required="true" @bind-Value="CustomerModel.CustomerId" Label="customerId"></IgbInput>
        <IgbInput DisplayType="InputType.Text" Required="true" @bind-Value="CustomerModel.CompanyName" Label="companyName"></IgbInput>
        <IgbInput DisplayType="InputType.Text" Required="true" @bind-Value="CustomerModel.ContactName" Label="contactName"></IgbInput>
        <IgbInput DisplayType="InputType.Text" Required="true" @bind-Value="CustomerModel.ContactTitle" Label="contactTitle"></IgbInput>
        <IgbInput DisplayType="InputType.Text" Required="true" @bind-Value="CustomerModel.Address.Street" Label="address.street"></IgbInput>
        <IgbInput DisplayType="InputType.Text" Required="true" @bind-Value="CustomerModel.Address.City" Label="address.city"></IgbInput>
        <IgbInput DisplayType="InputType.Text" Required="true" @bind-Value="CustomerModel.Address.Region" Label="address.region"></IgbInput>
        <IgbInput DisplayType="InputType.Text" Required="true" @bind-Value="CustomerModel.Address.PostalCode" Label="address.postalCode"></IgbInput>
        <IgbInput DisplayType="InputType.Text" Required="true" @bind-Value="CustomerModel.Address.Country" Label="address.country"></IgbInput>
        <IgbInput DisplayType="InputType.Text" Required="true" @bind-Value="CustomerModel.Address.Phone" Label="address.phone"></IgbInput>
        <IgbButton Variant="ButtonVariant.Contained" DisplayType="ButtonBaseType.Submit">
            Update
        </IgbButton>
        <IgbButton Variant="ButtonVariant.Contained" DisplayType="ButtonBaseType.Reset" @onclick="() => { CustomerModel = Customer.Clone() as CustomerDto; }">
            Reset
        </IgbButton>
    </EditForm>
    <EditForm EditContext="emptyEditContext" OnValidSubmit="SubmitEmptyModel" FormName="create" class="form" master_view-scope>
        <p>Create form not related to any variable</p>
        <p>Created customer has id @(EmptyModel.CustomerId ?? "NONE")</p>
        <p>Create edit context with id @((emptyEditContext.Model as CustomerDto).CustomerId)</p>
        <IgbInput DisplayType="InputType.Text" @bind-Value="EmptyModel.CustomerId" Label="customerId"></IgbInput>
        <IgbInput DisplayType="InputType.Text" @bind-Value="EmptyModel.CompanyName" Label="companyName"></IgbInput>
        <IgbInput DisplayType="InputType.Text" @bind-Value="EmptyModel.ContactName" Label="contactName"></IgbInput>
        <IgbInput DisplayType="InputType.Text" @bind-Value="EmptyModel.ContactTitle" Label="contactTitle"></IgbInput>
        <IgbInput DisplayType="InputType.Text" @bind-Value="EmptyModel.Address.Street" Label="address.street"></IgbInput>
        <IgbInput DisplayType="InputType.Text" @bind-Value="EmptyModel.Address.City" Label="address.city"></IgbInput>
        <IgbInput DisplayType="InputType.Text" @bind-Value="EmptyModel.Address.Region" Label="address.region"></IgbInput>
        <IgbInput DisplayType="InputType.Text" @bind-Value="EmptyModel.Address.PostalCode" Label="address.postalCode"></IgbInput>
        <IgbInput DisplayType="InputType.Text" @bind-Value="EmptyModel.Address.Country" Label="address.country"></IgbInput>
        <IgbInput DisplayType="InputType.Text" @bind-Value="EmptyModel.Address.Phone" Label="address.phone"></IgbInput>
        <IgbButton Variant="ButtonVariant.Contained" DisplayType="ButtonBaseType.Submit">
            Create
        </IgbButton>
        <IgbButton Variant="ButtonVariant.Contained" DisplayType="ButtonBaseType.Reset" @onclick="() => { EmptyModel = new(); }">
            Reset
        </IgbButton>
    </EditForm>
</div>

@code {
    private CustomerDto customer;
    public CustomerDto Customer
    {
        get { return customer; }
        set
        {
            customer = value;
            CustomerModel = Customer.Clone() as CustomerDto;
        }
    }
    private CustomerDto customerModel;
    // we do not need this. We have either empty form where no value should be supplied,
    // or we have form bound to a variable and we get the value from the clone of the variable
    // TODO: we could also skip generating of FormNames for the forms
    // [SupplyParameterFromForm(FormName = "customer")]
    public CustomerDto CustomerModel
    {
        get { return customerModel; }
        set
        {
            customerModel = value;
            customerEditContext = new(CustomerModel);
        }
    }

    private EditContext customerEditContext = new(new CustomerDto());

    private CustomerDto emptyModel;
    // [SupplyParameterFromForm(FormName = "empty")]
    public CustomerDto EmptyModel
    {
        get { return emptyModel; }
        set
        {
            emptyModel = value;
            emptyEditContext = new(EmptyModel);
        }
    }
    private EditContext emptyEditContext = new(new CustomerDto());

    public Master_View()
    {
        Customer = new();
        EmptyModel = new();
    }

    protected override async Task OnInitializedAsync()
    {
        Customer = await NorthwindRESTService.GetCustomerDto("QUEEN");
        await base.OnInitializedAsync();
    }

    private async void SubmitCustomerModel(EditContext e)
    {
        var customerDto = (CustomerDto)e.Model;
        if (customerDto != null)
        {
            var result = await NorthwindRESTService.PutCustomerDto(customerDto);
            if (result != null)
            {
                Customer.CustomerId = result.CustomerId;
                StateHasChanged();
            }
            else
            {
                // TODO: handle errors here.
            }
        }
    }

    private async void SubmitEmptyModel(EditContext e)
    {
        var customerDto = (CustomerDto)e.Model;
        if (customerDto != null)
        {
            var result = await NorthwindRESTService.PostCustomerDto(customerDto);
            if (result != null)
            {
                EmptyModel.CustomerId = result.CustomerId;
                StateHasChanged();
            }
            else
            {
                // TODO: handle errors here.
            }
        }
    }
}
